<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Momentus Admin Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        h1 {
            color: white;
            margin-bottom: 30px;
            font-size: 2.5em;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        }

        .card h2 {
            color: #667eea;
            margin-bottom: 20px;
            font-size: 1.5em;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .provider-card {
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .provider-card:hover {
            border-color: #667eea;
            transform: translateY(-2px);
        }

        .provider-card.active {
            border-color: #667eea;
            background: #f0f4ff;
        }

        .model-select {
            width: 100%;
            padding: 10px;
            border-radius: 6px;
            border: 1px solid #ddd;
            font-size: 14px;
            margin-top: 10px;
        }

        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .btn:hover {
            background: #5568d3;
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: #48bb78;
        }

        .btn-secondary:hover {
            background: #38a169;
        }

        .status {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }

        .status.active {
            background: #c6f6d5;
            color: #22543d;
        }

        .status.inactive {
            background: #fed7d7;
            color: #742a2a;
        }

        .stat-box {
            text-align: center;
            padding: 15px;
            background: #f7fafc;
            border-radius: 8px;
        }

        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
        }

        .stat-label {
            color: #718096;
            font-size: 0.9em;
            margin-top: 5px;
        }

        .test-result {
            margin-top: 15px;
            padding: 15px;
            border-radius: 6px;
            background: #f7fafc;
        }

        .test-result.success {
            background: #c6f6d5;
            color: #22543d;
        }

        .test-result.error {
            background: #fed7d7;
            color: #742a2a;
        }

        .meditation-preview {
            background: #f7fafc;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #667eea;
            white-space: pre-wrap;
            font-family: Georgia, serif;
            line-height: 1.8;
            max-height: 400px;
            overflow-y: auto;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .badge {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: 600;
            margin-left: 8px;
        }

        .badge.fast { background: #c6f6d5; color: #22543d; }
        .badge.medium { background: #feebc8; color: #7c2d12; }
        .badge.high { background: #bee3f8; color: #2c5282; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🧘 Momentus Admin Dashboard</h1>

        <!-- Current Configuration -->
        <div class="card">
            <h2>Current AI Configuration</h2>
            <div id="current-config">
                <p>Loading...</p>
            </div>
        </div>

        <!-- AI Provider Selection -->
        <div class="card">
            <h2>AI Provider & Model Selection</h2>
            <div class="grid">
                <div class="provider-card" id="provider-google" onclick="selectProvider('google')">
                    <h3>🤖 Google Gemini <span class="status" id="status-google">Checking...</span></h3>
                    <select class="model-select" id="model-google" onchange="updateModel('google', this.value)">
                        <option value="gemini-pro">Gemini Pro <span class="badge medium">Balanced</span> <span class="badge high">High Quality</span></option>
                        <option value="gemini-1.5-flash-latest">Gemini 1.5 Flash <span class="badge fast">Fast</span></option>
                        <option value="gemini-2.0-flash-exp">Gemini 2.0 Flash (Exp) <span class="badge fast">Very Fast</span></option>
                    </select>
                    <button class="btn" onclick="testProvider('google')" style="margin-top: 10px; width: 100%;">Test Provider</button>
                    <div id="test-result-google"></div>
                </div>

                <div class="provider-card" id="provider-anthropic" onclick="selectProvider('anthropic')">
                    <h3>🧠 Anthropic Claude <span class="status" id="status-anthropic">Checking...</span></h3>
                    <select class="model-select" id="model-anthropic" onchange="updateModel('anthropic', this.value)">
                        <option value="claude-3-opus-20240229">Claude 3 Opus <span class="badge medium">Slow</span> <span class="badge high">Highest Quality</span></option>
                        <option value="claude-3-sonnet-20240229">Claude 3 Sonnet <span class="badge fast">Fast</span> <span class="badge high">Good</span></option>
                        <option value="claude-3-haiku-20240307">Claude 3 Haiku <span class="badge fast">Very Fast</span></option>
                    </select>
                    <button class="btn" onclick="testProvider('anthropic')" style="margin-top: 10px; width: 100%;">Test Provider</button>
                    <div id="test-result-anthropic"></div>
                </div>
            </div>
            <div style="margin-top: 20px;">
                <button class="btn btn-secondary" onclick="saveConfiguration()">💾 Save Configuration</button>
            </div>
        </div>

        <!-- Test Meditation Generation -->
        <div class="card">
            <h2>Test Meditation Generation</h2>
            <div class="grid" style="grid-template-columns: 1fr 1fr;">
                <div>
                    <label>Latitude:</label>
                    <input type="number" id="test-lat" value="34.0522" step="0.0001" style="width: 100%; padding: 8px; margin: 5px 0; border-radius: 4px; border: 1px solid #ddd;">
                    <label>Longitude:</label>
                    <input type="number" id="test-lng" value="-117.2437" step="0.0001" style="width: 100%; padding: 8px; margin: 5px 0; border-radius: 4px; border: 1px solid #ddd;">
                    <button class="btn" onclick="testMeditation()" style="margin-top: 10px; width: 100%;">Generate Test Meditation</button>
                </div>
                <div id="meditation-output">
                    <p style="color: #718096;">Click "Generate Test Meditation" to preview</p>
                </div>
            </div>
        </div>

        <!-- System Statistics -->
        <div class="card">
            <h2>System Statistics</h2>
            <div class="grid">
                <div class="stat-box">
                    <div class="stat-number" id="stat-sessions">-</div>
                    <div class="stat-label">Active Sessions</div>
                </div>
                <div class="stat-box">
                    <div class="stat-number" id="stat-lunar">-</div>
                    <div class="stat-label">Current Lunar Day</div>
                </div>
                <div class="stat-box">
                    <div class="stat-number" id="stat-behaviors">21</div>
                    <div class="stat-label">Behavior Patterns</div>
                </div>
                <div class="stat-box">
                    <div class="stat-number" id="stat-species">5</div>
                    <div class="stat-label">Species Types</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentProvider = 'google';
        let currentModel = 'gemini-1.5-pro';

        async function loadConfig() {
            try {
                const res = await fetch('/api/admin/ai-config');
                const data = await res.json();

                if (data.success) {
                    currentProvider = data.config.provider;
                    currentModel = data.config.model;

                    document.getElementById('current-config').innerHTML = `
                        <p><strong>Provider:</strong> ${data.config.provider}</p>
                        <p><strong>Model:</strong> ${data.config.model}</p>
                        <p><strong>Google AI:</strong> <span class="status ${data.config.providersInitialized.google ? 'active' : 'inactive'}">${data.config.providersInitialized.google ? 'Active' : 'Inactive'}</span></p>
                        <p><strong>Claude AI:</strong> <span class="status ${data.config.providersInitialized.anthropic ? 'active' : 'inactive'}">${data.config.providersInitialized.anthropic ? 'Active' : 'Inactive'}</span></p>
                    `;

                    document.getElementById('status-google').className = 'status ' + (data.config.providersInitialized.google ? 'active' : 'inactive');
                    document.getElementById('status-google').textContent = data.config.providersInitialized.google ? 'Active' : 'Inactive';

                    document.getElementById('status-anthropic').className = 'status ' + (data.config.providersInitialized.anthropic ? 'active' : 'inactive');
                    document.getElementById('status-anthropic').textContent = data.config.providersInitialized.anthropic ? 'Active' : 'Inactive';

                    selectProvider(currentProvider);
                    document.getElementById('model-' + currentProvider).value = currentModel;
                }
            } catch (error) {
                console.error('Failed to load config:', error);
            }
        }

        async function loadStats() {
            try {
                const res = await fetch('/api/admin/stats');
                const data = await res.json();

                if (data.success) {
                    document.getElementById('stat-sessions').textContent = data.stats.session.activeSessions;
                    document.getElementById('stat-lunar').textContent = data.stats.session.lunarStats?.currentLunarDay || '-';
                }
            } catch (error) {
                console.error('Failed to load stats:', error);
            }
        }

        function selectProvider(provider) {
            currentProvider = provider;
            document.querySelectorAll('.provider-card').forEach(card => {
                card.classList.remove('active');
            });
            document.getElementById('provider-' + provider).classList.add('active');
        }

        function updateModel(provider, model) {
            if (provider === currentProvider) {
                currentModel = model;
            }
        }

        async function testProvider(provider) {
            const model = document.getElementById('model-' + provider).value;
            const resultDiv = document.getElementById('test-result-' + provider);

            resultDiv.innerHTML = '<div class="test-result"><span class="loading"></span> Testing...</div>';

            try {
                const res = await fetch('/api/admin/test-ai', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ provider, model })
                });

                const data = await res.json();

                if (data.result.success) {
                    resultDiv.innerHTML = `
                        <div class="test-result success">
                            ✅ Success! Response: ${data.result.responseLength} chars<br>
                            Tokens: ${data.result.usage.totalTokens}
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `
                        <div class="test-result error">
                            ❌ Failed: ${data.result.error}
                        </div>
                    `;
                }
            } catch (error) {
                resultDiv.innerHTML = `<div class="test-result error">❌ Error: ${error.message}</div>`;
            }
        }

        async function saveConfiguration() {
            try {
                const res = await fetch('/api/admin/ai-config', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        provider: currentProvider,
                        model: currentModel
                    })
                });

                const data = await res.json();

                if (data.success) {
                    alert('✅ Configuration saved successfully!');
                    loadConfig();
                } else {
                    alert('❌ Failed to save configuration: ' + data.error);
                }
            } catch (error) {
                alert('❌ Error: ' + error.message);
            }
        }

        async function testMeditation() {
            const lat = document.getElementById('test-lat').value;
            const lng = document.getElementById('test-lng').value;
            const outputDiv = document.getElementById('meditation-output');

            outputDiv.innerHTML = '<div class="loading"></div> Generating meditation...';

            try {
                const res = await fetch('/api/admin/test-meditation', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        latitude: parseFloat(lat),
                        longitude: parseFloat(lng),
                        provider: currentProvider,
                        model: currentModel
                    })
                });

                const data = await res.json();

                if (data.success) {
                    outputDiv.innerHTML = `
                        <div class="meditation-preview">${data.session.content.text}</div>
                        <p style="margin-top: 10px; color: #718096;">
                            Species: ${data.session.species.name} |
                            Lunar: Day ${data.session.lunar.day} (${data.session.lunar.phase}) |
                            Duration: ${data.session.content.duration}s
                        </p>
                    `;
                } else {
                    outputDiv.innerHTML = '<div class="test-result error">Failed to generate meditation</div>';
                }
            } catch (error) {
                outputDiv.innerHTML = '<div class="test-result error">Error: ' + error.message + '</div>';
            }
        }

        // Load on page load
        loadConfig();
        loadStats();
        setInterval(loadStats, 10000); // Refresh stats every 10 seconds
    </script>
</body>
</html>
